# This is a basic workflow to help you get started with Actions

name: Build_VIPM_Library

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches:
      - main
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Build_VIPM_Library:
    # The type of runner that the job will run on
    runs-on: [self-hosted, lv2014]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Print environment variables
        run: |
          echo "CI_REPOSITORY_SLUG=$CI_REPOSITORY_SLUG"
          echo "CI_REPOSITORY_OWNER=$CI_REPOSITORY_OWNER"
          echo "CI_REPOSITORY_OWNER_SLUG=$CI_REPOSITORY_OWNER_SLUG"
          echo "CI_REPOSITORY_NAME=$CI_REPOSITORY_NAME"
          echo "CI_REPOSITORY_NAME_SLUG=$CI_REPOSITORY_NAME_SLUG"
          echo "CI_REPOSITORY=$CI_REPOSITORY"
          echo "CI_REF_SLUG=$CI_REF_SLUG"
          echo "CI_ACTION_REF_NAME=$CI_ACTION_REF_NAME"
          echo "CI_ACTION_REF_NAME_SLUG=$CI_ACTION_REF_NAME_SLUG"
          echo "CI_REF_NAME=$CI_REF_NAME"
          echo "CI_REF_NAME_SLUG=$CI_REF_NAME_SLUG"
          echo "CI_REF=$CI_REF"
          echo "CI_HEAD_REF_SLUG=$CI_HEAD_REF_SLUG"
          echo "CI_HEAD_REF=$CI_HEAD_REF"
          echo "CI_BASE_REF_SLUG=$CI_BASE_REF_SLUG"
          echo "CI_BASE_REF=$CI_BASE_REF"
          echo "CI_SHA_SHORT=$CI_SHA_SHORT"
          echo "CI_SHA=$CI_SHA"
          echo "CI_PR_SHA_SHORT=$CI_PR_SHA_SHORT"
          echo "CI_PR_SHA=$CI_PR_SHA"
          echo "CI_PR_NUMBER=$CI_PR_NUMBER"
          echo "CI_PR_ID=$CI_PR_ID"
          echo "CI_PR_TITLE=$CI_PR_TITLE"
          echo "CI_PR_DESCRIPTION=$CI_PR_DESCRIPTION"
          echo "CI_ACTOR=$CI_ACTOR"
          echo "CI_EVENT_NAME=$CI_EVENT_NAME"
          echo "CI_RUN_ID=$CI_RUN_ID"
          echo "CI_RUN_NUMBER=$CI_RUN_NUMBER"
          echo "CI_WORKFLOW=$CI_WORKFLOW"
          echo "CI_ACTION=$CI_ACTION"
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # - name: vipm_InstallPackagesByName
      #   uses: LV-APT/lvCICD@main
      #   with:
      #     Operation: vipm_InstallPackagesByName
      #     Parameter1: 'Git API'

      # Runs a set of commands using the runners shell
      - name: BuildDailyVIP
        id: build-vip
        uses: LV-APT/lvCICD@main
        with:
          LabVIEW_Version: 2014
          Operation: vipm_BuildDailyVIP
          Parameter1: ${{ github.workspace }}\NEVSTOP-3rdParty-Dependencies.vipb
          Parameter2: NO

      - id: vip-name
        run:
          $vipName=Split-Path -Path ${{ steps.build-vip.outputs.Result }} -Leaf;
          Write-Host "::set-output name=vipName::"$vipName""
        shell: powershell

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.0.0
        with:
          # Artifact name
          name: ${{ steps.vip-name.outputs.vipName }}
          path: ${{ steps.build-vip.outputs.Result }}
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: warn
          retention-days: 90          

      - name: backup build artifact by ftp
        uses: sebastianpopp/ftp-action@releases/v2
        with:
          host: ${{ secrets.VIPM_FTP_IP }}
          user: ${{ secrets.VIPM_FTP_USER }}
          password: ${{ secrets.VIPM_FTP_PASSWORD }}
          localDir: ${{ steps.build-vip.outputs.Result }}
          remoteDir: "$CI_REPOSITORY_NAME"
          options: "--delete --asci"
